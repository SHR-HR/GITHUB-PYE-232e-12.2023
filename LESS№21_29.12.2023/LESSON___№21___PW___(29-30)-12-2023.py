# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
''''
Дата выполнения практической работы: 29-30 - ДЕКАБРЯ 2023
''''
'''
Курс: Разработка Web-приложений на Python, с применением Фреймворка Django
Дисциплина: Основы программирования на Python
'''
'''
Урок от 29.12.2023
Практическая работа №21: ООП.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Выполните следующие задания:
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
Задания №1
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
Работаем с примером, приведенным на практике. 
Мы можем менять значения полей dia и h объекта за пределами класса простым присваиванием (например, a.dia = 10).
При этом площадь никак не будет пересчитываться. Также мы можем назначить новое значение для площади, 
как простым присваиванием, так и вызовом функции make_area() с последующим присваиванием. 
Например, a.area = a.make_area(2, 3). При этом не меняются высота и диаметр.

Защитите код от возможных логических ошибок следующим образом:
Свойствам dia и h объекта по-прежнему можно выполнять присваивание за пределами класса. 
Однако при этом "за кулисами" происходит пересчет площади, т. е. изменение значения area.
Свойству area нельзя присваивать за пределами класса. Можно только получать его значение.

Подсказка: 
вспомните про метод __setattr__(), упомянутый в уроке про инкапсуляцию.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
Задания №2
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
Создайте класс для подсчета площади геометрических фигур.
Класс должен предоставлять функциональность для подсчета площади треугольника по разным формулам, 
площади прямоугольника, площади квадрата, площади ромба. Методы класса для подсчета площади должны быть реализованы
с помощью статических методов. Также класс должен считать количество подсчетов площади и возвращать это значение 
с помощью статического метода.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
Задания №3
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
Создайте класс для подсчета максимума из четырех аргументов, минимума из четырех аргументов,
среднеарифметического из четырех аргументов, факториала аргумента. 
Функциональность необходимо реализовать в виде статических методов.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Решение этих заданий ↑   ↑   ↑   ↑
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
'''
Задание №1:
'''
class Cylinder:
    def __init__(self, dia, h):
        # Инициализация объекта с заданными значениями диаметра и высоты
        self._dia = dia
        self._h = h
        # Вычисление и сохранение площади поверхности
        self._area = self.make_area()

    def make_area(self):
        # Метод для вычисления площади поверхности цилиндра
        return 3.14 * (self._dia / 2) ** 2 * self._h

    def __setattr__(self, name, value):
        # Переопределение метода для контроля изменений атрибутов
        if name in ('dia', 'h'):
            # Если изменяются атрибуты dia или h, обновляем их значения
            object.__setattr__(self, name, value)
            # Пересчитываем площадь поверхности при изменении dia или h
            self._area = self.make_area()
        elif name == 'area':
            # Если пытаются изменить атрибут area, возбуждаем исключение
            raise AttributeError("Can't set attribute 'area'")
        else:
            # Для других атрибутов вызываем базовый метод __setattr__
            object.__setattr__(self, name, value)

    @property
    def area(self):
        # Свойство для доступа к значению площади поверхности (только чтение)
        return self._area

    @property
    def dia(self):
        # Свойство для доступа к значению диаметра (только чтение)
        return self._dia

    @dia.setter
    def dia(self, value):
        # Сеттер для свойства dia, обновляет dia и пересчитывает площадь
        self._dia = value
        self._area = self.make_area()

    @property
    def h(self):
        # Свойство для доступа к значению высоты (только чтение)
        return self._h

    @h.setter
    def h(self, value):
        # Сеттер для свойства h, обновляет h и пересчитывает площадь
        self._h = value
        self._area = self.make_area()


# Функция для ввода числа с проверкой на корректность
def input_float(prompt):
    while True:
        try:
            return float(input(prompt))
        except ValueError:
            print("Пожалуйста, введите корректное число.")


# Пример использования с вводом данных с клавиатуры
dia_input = input_float("Введите диаметр цилиндра: ")
h_input = input_float("Введите высоту цилиндра: ")

# Создание объекта цилиндра с введенными значениями
c = Cylinder(dia=dia_input, h=h_input)
# Вывод площади поверхности цилиндра с двумя знаками после запятой
print(f"Площадь поверхности цилиндра: {c.area:.2f}")

# Изменение диаметра с клавиатуры
new_dia = input_float("Введите новый диаметр цилиндра: ")
# Изменение диаметра и автоматический пересчет площади
c.dia = new_dia
# Вывод обновленной площади поверхности цилиндра с двумя знаками после запятой
print(f"Обновленная площадь поверхности цилиндра: {c.area:.2f}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
'''
Шаг №1: Инициализация класса Cylinder
'''
class Cylinder:
    def __init__(self, dia, h):
        # Инициализация объекта с заданными значениями диаметра и высоты
        self._dia = dia
        self._h = h
        # Вычисление и сохранение площади поверхности
        self._area = self.make_area()
'''
В этом шаге определен конструктор __init__, который инициализирует объект класса Cylinder заданными значениями диаметра
(dia) и высоты (h). Затем вычисляется и сохраняется площадь поверхности с использованием метода make_area().
'''
'''
Шаг №2: Метод make_area()
'''
def make_area(self):
    # Метод для вычисления площади поверхности цилиндра
    return 3.14 * (self._dia / 2) ** 2 * self._h
'''
Метод make_area() вычисляет и возвращает площадь поверхности цилиндра на основе текущих значений диаметра и высоты.
'''
'''
Шаг №3: Переопределение __setattr__
'''
def __setattr__(self, name, value):
    # Переопределение метода для контроля изменений атрибутов
    if name in ('dia', 'h'):
        # Если изменяются атрибуты dia или h, обновляем их значения
        object.__setattr__(self, name, value)
        # Пересчитываем площадь поверхности при изменении dia или h
        self._area = self.make_area()
    elif name == 'area':
        # Если пытаются изменить атрибут area, возбуждаем исключение
        raise AttributeError("Can't set attribute 'area'")
    else:
        # Для других атрибутов вызываем базовый метод __setattr__
        object.__setattr__(self, name, value)
'''
Этот шаг переопределяет метод __setattr__, который вызывается при попытке изменения атрибутов объекта.
Если изменяются атрибуты dia или h, их значения обновляются, и затем пересчитывается площадь поверхности.
Если пытаются изменить атрибут area, возбуждается исключение.
'''
'''
Шаг №4-6: Свойства для доступа к атрибутам
'''
@property
def area(self):
    # Свойство для доступа к значению площади поверхности (только чтение)
    return self._area

@property
def dia(self):
    # Свойство для доступа к значению диаметра (только чтение)
    return self._dia

@dia.setter
def dia(self, value):
    # Сеттер для свойства dia, обновляет dia и пересчитывает площадь
    self._dia = value
    self._area = self.make_area()

@property
def h(self):
    # Свойство для доступа к значению высоты (только чтение)
    return self._h

@h.setter
def h(self, value):
    # Сеттер для свойства h, обновляет h и пересчитывает площадь
    self._h = value
    self._area = self.make_area()
'''
Эти шаги определяют свойства (area, dia, h) с использованием декораторов @property, которые обеспечивают доступ
только для чтения. Для атрибутов dia и h также определены сеттеры (@dia.setter и @h.setter), которые обновляют
соответствующий атрибут и пересчитывают площадь.
'''
'''
Пример использования:
'''
# Пример использования с вводом данных с клавиатуры
dia_input = input_float("Введите диаметр цилиндра: ")
h_input = input_float("Введите высоту цилиндра: ")

# Создание объекта цилиндра с введенными значениями
c = Cylinder(dia=dia_input, h=h_input)
# Вывод площади поверхности цилиндра с двумя знаками после запятой
print(f"Площадь поверхности цилиндра: {c.area:.2f}")

# Изменение диаметра с клавиатуры
new_dia = input_float("Введите новый диаметр цилиндра: ")
# Изменение диаметра и автоматический пересчет площади
c.dia = new_dia
# Вывод обновленной площади поверхности цилиндра с двумя знаками после запятой
print(f"Обновленная площадь поверхности цилиндра: {c.area:.2f}")
'''
Этот пример иллюстрирует использование созданного класса Cylinder и подтверждает,
что изменения диаметра автоматически пересчитывают площадь поверхности цилиндра, как и было задумано в задании.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
'''
Задание №2:
'''
class GeometryCalculator:
    """
    Класс для подсчета площади геометрических фигур.
    Предоставляет функциональность для подсчета площади треугольника по разным формулам,
    площади прямоугольника, площади квадрата, площади ромба.
    Методы класса для подсчета площади реализованы с использованием статических методов.
    Класс также считает количество подсчетов площади и возвращает это значение с помощью статического метода.
    """

    _calculation_count = 0

    @staticmethod
    def triangle_area(base, height):
        """
        Статический метод для подсчета площади треугольника.

        :param base: Длина основания треугольника.
        :param height: Высота треугольника.
        :return: Площадь треугольника.
        """
        if base <= 0 or height <= 0:
            raise ValueError("Base and height must be positive numbers.")
        return 0.5 * base * height

    @staticmethod
    def rectangle_area(length, width):
        """
        Статический метод для подсчета площади прямоугольника.

        :param length: Длина прямоугольника.
        :param width: Ширина прямоугольника.
        :return: Площадь прямоугольника.
        """
        if length <= 0 or width <= 0:
            raise ValueError("Length and width must be positive numbers.")
        return length * width

    @staticmethod
    def square_area(side):
        """
        Статический метод для подсчета площади квадрата.

        :param side: Длина стороны квадрата.
        :return: Площадь квадрата.
        """
        if side <= 0:
            raise ValueError("Side length must be a positive number.")
        return side ** 2

    @staticmethod
    def rhombus_area(diagonal1, diagonal2):
        """
        Статический метод для подсчета площади ромба.

        :param diagonal1: Длина первой диагонали ромба.
        :param diagonal2: Длина второй диагонали ромба.
        :return: Площадь ромба.
        """
        if diagonal1 <= 0 or diagonal2 <= 0:
            raise ValueError("Diagonals must be positive numbers.")
        return 0.5 * diagonal1 * diagonal2

    @staticmethod
    def count_calculations():
        """
        Статический метод для возврата количества подсчетов площади.

        :return: Количество подсчетов площади.
        """
        return GeometryCalculator._calculation_count

    def __init__(self):
        """
        Конструктор класса, увеличивает количество подсчетов при создании объекта.
        """
        GeometryCalculator._calculation_count += 1

# Функция для ввода числа с проверкой на корректность
def input_float(prompt):
    while True:
        try:
            # Заменяем запятую на точку для корректного преобразования в float
            input_str = input(prompt).replace(',', '.')
            return float(input_str)
        except ValueError:
            print("Пожалуйста, введите корректное число.")

# Пример использования с вводом данных с клавиатуры
gc = GeometryCalculator()

# Ввод данных для расчета площади треугольника
base_input = input_float("Введите длину основания треугольника: ")
height_input = input_float("Введите высоту треугольника: ")
area_triangle = GeometryCalculator.triangle_area(base_input, height_input)
print(f"Площадь треугольника: {area_triangle}")

# Ввод данных для расчета площади прямоугольника
length_input = input_float("Введите длину прямоугольника: ")
width_input = input_float("Введите ширину прямоугольника: ")
area_rectangle = GeometryCalculator.rectangle_area(length_input, width_input)
print(f"Площадь прямоугольника: {area_rectangle}")

# Ввод данных для расчета площади квадрата
side_input = input_float("Введите длину стороны квадрата: ")
area_square = GeometryCalculator.square_area(side_input)
print(f"Площадь квадрата: {area_square}")

# Ввод данных для расчета площади ромба
diagonal1_input = input_float("Введите длину первой диагонали ромба: ")
diagonal2_input = input_float("Введите длину второй диагонали ромба: ")
area_rhombus = GeometryCalculator.rhombus_area(diagonal1_input, diagonal2_input)
print(f"Площадь ромба: {area_rhombus}")

# Вывод общего количества подсчетов
print(f"Общее количество подсчетов: {GeometryCalculator.count_calculations()}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
'''
Шаг №1: Описание класса GeometryCalculator
'''
class GeometryCalculator:
    """
    Класс для подсчета площади геометрических фигур.
    Предоставляет функциональность для подсчета площади треугольника по разным формулам,
    площади прямоугольника, площади квадрата, площади ромба.
    Методы класса для подсчета площади реализованы с использованием статических методов.
    Класс также считает количество подсчетов площади и возвращает это значение с помощью статического метода.
    """
    _calculation_count = 0

    @staticmethod
    def triangle_area(base, height):
        """
        Статический метод для подсчета площади треугольника.

        :param base: Длина основания треугольника.
        :param height: Высота треугольника.
        :return: Площадь треугольника.
        """
        if base <= 0 or height <= 0:
            raise ValueError("Base and height must be positive numbers.")
        return 0.5 * base * height

    @staticmethod
    def rectangle_area(length, width):
        """
        Статический метод для подсчета площади прямоугольника.

        :param length: Длина прямоугольника.
        :param width: Ширина прямоугольника.
        :return: Площадь прямоугольника.
        """
        if length <= 0 or width <= 0:
            raise ValueError("Length and width must be positive numbers.")
        return length * width

    @staticmethod
    def square_area(side):
        """
        Статический метод для подсчета площади квадрата.

        :param side: Длина стороны квадрата.
        :return: Площадь квадрата.
        """
        if side <= 0:
            raise ValueError("Side length must be a positive number.")
        return side ** 2

    @staticmethod
    def rhombus_area(diagonal1, diagonal2):
        """
        Статический метод для подсчета площади ромба.

        :param diagonal1: Длина первой диагонали ромба.
        :param diagonal2: Длина второй диагонали ромба.
        :return: Площадь ромба.
        """
        if diagonal1 <= 0 or diagonal2 <= 0:
            raise ValueError("Diagonals must be positive numbers.")
        return 0.5 * diagonal1 * diagonal2

    @staticmethod
    def count_calculations():
        """
        Статический метод для возврата количества подсчетов площади.

        :return: Количество подсчетов площади.
        """
        return GeometryCalculator._calculation_count

    def __init__(self):
        """
        Конструктор класса, увеличивает количество подсчетов при создании объекта.
        """
        GeometryCalculator._calculation_count += 1
'''
Этот шаг описывает класс GeometryCalculator, который предоставляет функциональность для подсчета площади различных
геометрических фигур. Методы для подсчета площади (треугольника, прямоугольника, квадрата, ромба) реализованы как
статические методы. Также в классе есть статический метод для подсчета количества подсчетов площади и конструктор,
увеличивающий это количество при создании объекта.
'''
'''
Шаг №2: Пример использования класса
'''
# Функция для ввода числа с проверкой на корректность
def input_float(prompt):
    while True:
        try:
            # Заменяем запятую на точку для корректного преобразования в float
            input_str = input(prompt).replace(',', '.')
            return float(input_str)
        except ValueError:
            print("Пожалуйста, введите корректное число.")

# Пример использования с вводом данных с клавиатуры
gc = GeometryCalculator()

# Ввод данных для расчета площади треугольника
base_input = input_float("Введите длину основания треугольника: ")
height_input = input_float("Введите высоту треугольника: ")
area_triangle = GeometryCalculator.triangle_area(base_input, height_input)
print(f"Площадь треугольника: {area_triangle}")

# Ввод данных для расчета площади прямоугольника
length_input = input_float("Введите длину прямоугольника: ")
width_input = input_float("Введите ширину прямоугольника: ")
area_rectangle = GeometryCalculator.rectangle_area(length_input, width_input)
print(f"Площадь прямоугольника: {area_rectangle}")

# Ввод данных для расчета площади квадрата
side_input = input_float("Введите длину стороны квадрата: ")
area_square = GeometryCalculator.square_area(side_input)
print(f"Площадь квадрата: {area_square}")

# Ввод данных для расчета площади ромба
diagonal1_input = input_float("Введите длину первой диагонали ромба: ")
diagonal2_input = input_float("Введите длину второй диагонали ромба: ")
area_rhombus = GeometryCalculator.rhombus_area(diagonal1_input, diagonal2_input)
print(f"Площадь ромба: {area_rhombus}")

# Вывод общего количества подсчетов
print(f"Общее количество подсчетов: {GeometryCalculator.count_calculations()}")
'''
Этот шаг показывает пример использования класса с вводом данных с клавиатуры и расчетом площади для различных 
геометрических фигур. Создается объект gc класса GeometryCalculator, и затем пользователь вводит данные для расчета
площади треугольника, прямоугольника, квадрата и ромба. Результаты выводятся на экран, и также выводится общее
количество подсчетов.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
'''
Задание №3:
'''
import math

class MathOperations:
    """
    Класс для выполнения математических операций над четырьмя числами.
    Предоставляет функциональность для подсчета максимума, минимума,
    среднеарифметического и факториала из четырех аргументов.
    """

    @staticmethod
    def max_of_four(a, b, c, d):
        """
        Статический метод для подсчета максимума из четырех аргументов.

        :param a: Первый аргумент.
        :param b: Второй аргумент.
        :param c: Третий аргумент.
        :param d: Четвертый аргумент.
        :return: Максимальное значение.
        """
        return max(a, b, c, d)

    @staticmethod
    def min_of_four(a, b, c, d):
        """
        Статический метод для подсчета минимума из четырех аргументов.

        :param a: Первый аргумент.
        :param b: Второй аргумент.
        :param c: Третий аргумент.
        :param d: Четвертый аргумент.
        :return: Минимальное значение.
        """
        return min(a, b, c, d)

    @staticmethod
    def average_of_four(a, b, c, d):
        """
        Статический метод для подсчета среднеарифметического из четырех аргументов.

        :param a: Первый аргумент.
        :param b: Второй аргумент.
        :param c: Третий аргумент.
        :param d: Четвертый аргумент.
        :return: Среднеарифметическое значение.
        """
        return (a + b + c + d) / 4

    @staticmethod
    def factorial(n):
        """
        Статический метод для подсчета факториала числа.

        :param n: Целое число.
        :return: Факториал числа n.
        """
        if not isinstance(n, int) or n < 0:
            raise ValueError("Факториал определен только для неотрицательных целых чисел.")
        return math.factorial(n)


# Функция для ввода числа с проверкой на корректность
def input_integer(prompt):
    while True:
        try:
            return int(input(prompt))
        except ValueError:
            print("Пожалуйста, введите целое число.")


# Пример использования с вводом данных с клавиатуры
try:
    a = input_integer("Введите первое число: ")
    b = input_integer("Введите второе число: ")
    c = input_integer("Введите третье число: ")
    d = input_integer("Введите четвертое число: ")

    result_max = MathOperations.max_of_four(a, b, c, d)
    result_min = MathOperations.min_of_four(a, b, c, d)
    result_avg = MathOperations.average_of_four(a, b, c, d)
    result_fact = MathOperations.factorial(a)

    print(f"Максимальное из четырех чисел: {result_max}")
    print(f"Минимальное из четырех чисел: {result_min}")
    print(f"Среднее арифметическое из четырех чисел: {result_avg}")
    print(f"Факториал первого числа: {result_fact}")

except ValueError as e:
    print(f"Ошибка: {e}")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
'''
Шаг 1: Описание класса MathOperations
'''
import math

class MathOperations:
    """
    Класс для выполнения математических операций над четырьмя числами.
    Предоставляет функциональность для подсчета максимума, минимума,
    среднеарифметического и факториала из четырех аргументов.
    """
'''
Описание:

Импортируется модуль math, который предоставляет математические функции, такие как факториал.
Создается класс MathOperations для выполнения математических операций.
'''
'''
Шаг 2: Статические методы класса
'''

@staticmethod
def max_of_four(a, b, c, d):
    """
    Статический метод для подсчета максимума из четырех аргументов.
    :param a: Первый аргумент.
    :param b: Второй аргумент.
    :param c: Третий аргумент.
    :param d: Четвертый аргумент.
    :return: Максимальное значение.
    """
    return max(a, b, c, d)

@staticmethod
def min_of_four(a, b, c, d):
    """
    Статический метод для подсчета минимума из четырех аргументов.
    :param a: Первый аргумент.
    :param b: Второй аргумент.
    :param c: Третий аргумент.
    :param d: Четвертый аргумент.
    :return: Минимальное значение.
    """
    return min(a, b, c, d)

@staticmethod
def average_of_four(a, b, c, d):
    """
    Статический метод для подсчета среднеарифметического из четырех аргументов.
    :param a: Первый аргумент.
    :param b: Второй аргумент.
    :param c: Третий аргумент.
    :param d: Четвертый аргумент.
    :return: Среднеарифметическое значение.
    """
    return (a + b + c + d) / 4

@staticmethod
def factorial(n):
    """
    Статический метод для подсчета факториала числа.
    :param n: Целое число.
    :return: Факториал числа n.
    """
    if not isinstance(n, int) or n < 0:
        raise ValueError("Факториал определен только для неотрицательных целых чисел.")
    return math.factorial(n)
'''
Описание:

max_of_four: Возвращает максимальное значение из четырех аргументов, используя встроенную функцию max.
min_of_four: Возвращает минимальное значение из четырех аргументов, используя встроенную функцию min.
average_of_four: Возвращает среднеарифметическое значение из четырех аргументов.
factorial: Возвращает факториал числа n, используя функцию math.factorial.
'''
'''
Шаг 3: Функция ввода целого числа с проверкой
'''
# Функция для ввода числа с проверкой на корректность
def input_integer(prompt):
    while True:
        try:
            return int(input(prompt))
        except ValueError:
            print("Пожалуйста, введите целое число.")
'''
Описание:

input_integer: Бесконечный цикл для ввода целого числа с обработкой исключений. 
Если ввод не является целым числом, выводится сообщение об ошибке.
'''
'''
Шаг 4: Пример использования с вводом данных
'''
# Пример использования с вводом данных с клавиатуры
try:
    a = input_integer("Введите первое число: ")
    b = input_integer("Введите второе число: ")
    c = input_integer("Введите третье число: ")
    d = input_integer("Введите четвертое число: ")

    result_max = MathOperations.max_of_four(a, b, c, d)
    result_min = MathOperations.min_of_four(a, b, c, d)
    result_avg = MathOperations.average_of_four(a, b, c, d)
    result_fact = MathOperations.factorial(a)

    print(f"Максимальное из четырех чисел: {result_max}")
    print(f"Минимальное из четырех чисел: {result_min}")
    print(f"Среднее арифметическое из четырех чисел: {result_avg}")
    print(f"Факториал первого числа: {result_fact}")

except ValueError as e:
    print(f"Ошибка: {e}")
'''
Описание:

Используется функция input_integer для ввода четырех целых чисел с клавиатуры.
Затем вызываются статические методы класса MathOperations для подсчета максимума, минимума, 
среднеарифметического и факториала.

Результаты выводятся на экран.
Если происходит ошибка (например, ввод не является целым числом), выводится сообщение об ошибке.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #