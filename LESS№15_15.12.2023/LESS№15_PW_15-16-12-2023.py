# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''''   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓   ↓
Дата выполнения практической работы: 15-16 - ДЕКАБРЯ 2023
'''''
'''
Курс: Разработка Web-приложений на Python, с применением Фреймворка Django
Дисциплина: Основы программирования на Python
'''
'''
Урок от 15.12.2023
Практическая работа №15: Работа с комплексными файлами - excel, json, word. Библиотеки openpyxl, json, docx
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Выполните следующие задания:
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Задание №1

а) Создайте word файл в операционной системе, заполните его текстом «Hello Python».
б) Прочитайте этот файл в python-строку и выведите на экран.
в) Создайте абзац с текстом и запишите это в новый word-файл.

'''
'''
Решение:
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
а) Создайте word файл в операционной системе, заполните его текстом «Hello Python». ↓ 
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
!!! pip install python-docx !!!
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #

from docx import Document

# Создаем новый документ
doc = Document()

# Заполняем текстом
doc.add_paragraph("Hello Python")

# Сохраняем документ
doc.save("hello_python.docx")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
1: Импорт библиотеки:
'''
from docx import Document
'''
Эта строка кода импортирует класс Document из библиотеки python-docx. python-docx - это библиотека для работы с 
документами Microsoft Word в формате .docx. Она позволяет создавать, редактировать и читать документы Word.
'''
'''
2: Создание нового документа:
'''
doc = Document()
'''
Здесь создается новый объект Document, который представляет собой пустой документ Word.
'''
'''
3: Добавление параграфа в документ:
'''
doc.add_paragraph("Hello Python")
'''
Эта строка добавляет новый параграф с текстом "Hello Python" в созданный документ.
В документе может быть много параграфов, и этот метод используется для добавления текста.
'''
'''
4: Сохранение документа:
'''
doc.save("hello_python.docx")
'''
Данная строка сохраняет созданный документ в файл с именем "hello_python.docx".
Если файл с таким именем уже существует, он будет перезаписан. Если нет, то будет создан новый файл.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
б) Прочитайте этот файл в python-строку и выведите на экран. ↓ 
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
from docx import Document

# Открываем существующий документ
doc = Document("hello_python.docx")

# Получаем текст из документа
text = ""
for paragraph in doc.paragraphs:
    text += paragraph.text + "\n"

# Выводим текст на экран
print(text)
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
1: Импорт библиотеки:
'''
from docx import Document
'''
Здесь импортируется класс Document из библиотеки python-docx, которая используется для работы с документами Word.
'''
'''
2: Открытие существующего документа:
'''
doc = Document("hello_python.docx")
'''
Создается объект Document, представляющий существующий документ Word с именем "hello_python.docx".
Это предполагает, что в рабочей директории программы есть файл с таким именем.
'''
'''
3: Извлечение текста из документа:
'''
text = ""
for paragraph in doc.paragraphs:
    text += paragraph.text + "\n"
'''
Здесь используется цикл for, чтобы пройтись по всем параграфам в документе (doc.paragraphs). Текст каждого параграфа
извлекается с использованием paragraph.text и добавляется к переменной text.
Каждый параграф разделяется символом новой строки "\n".
'''
'''
4: Вывод текста на экран:
'''
print(text)
'''
После того, как весь текст извлечен, он выводится на экран с помощью функции print.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
в) Создайте абзац с текстом и запишите это в новый word-файл. ↓ 
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
from docx import Document

# Создаем новый документ
new_doc = Document()

# Добавляем абзац с текстом
new_doc.add_paragraph("New paragraph with some text.")

# Сохраняем новый документ
new_doc.save("new_document.docx")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
1: Импорт библиотеки:
'''
from docx import Document
'''
Эта строка кода импортирует класс Document из библиотеки python-docx. python-docx - это библиотека для работы
с документами Microsoft Word в формате .docx
'''
'''
2: Создание нового документа:
'''
new_doc = Document()
'''
Здесь создается новый объект Document, представляющий собой пустой документ Word.
В этот объект будут добавляться абзацы, таблицы и другие элементы.
'''
'''
3: Добавление абзаца с текстом:
'''
new_doc.add_paragraph("New paragraph with some text.")
'''
Эта строка добавляет новый абзац в созданный документ и заполняет его текстом
"New paragraph with some text.". Метод add_paragraph предназначен для добавления абзаца в документ.
'''
'''
4: Сохранение нового документа:
'''
new_doc.save("new_document.docx")
'''
После добавления абзаца документ сохраняется в файл с именем "new_document.docx".
Если файл с таким именем уже существует, он будет перезаписан. Если нет, то будет создан новый файл.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
""" ВСЕ СРАЗУ """
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
from docx import Document

# Часть а) Создаем Word файл и заполняем его текстом "Hello Python"
doc = Document()
doc.add_paragraph("Hello Python")
doc.save("hello_python.docx")

# Часть б) Читаем файл и выводим текст на экран
read_doc = Document("hello_python.docx")
text_from_doc = ""
for paragraph in read_doc.paragraphs:
    text_from_doc += paragraph.text + "\n"
print("Текст из файла:")
print(text_from_doc)

# Часть в) Создаем новый документ с абзацем и сохраняем его
new_doc = Document()
new_doc.add_paragraph("New paragraph with some text.")
new_doc.save("new_document.docx")

print("Новый документ создан и сохранен.")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
По порядку: а) Создаем Word файл и заполняем его текстом "Hello Python"
'''
'''
1: Импорт библиотеки:
'''
from docx import Document
'''
Эта строка кода импортирует класс Document из библиотеки python-docx.
'''
'''
2: Создание нового документа и добавление текста:
'''
doc = Document()
doc.add_paragraph("Hello Python")
'''
Здесь создается новый объект Document, и в него добавляется абзац с текстом "Hello Python".
'''
'''
3: Сохранение документа:
'''
doc.save("hello_python.docx")
'''
Сохраняет созданный документ в файл с именем "hello_python.docx".
'''
'''
По порядку: б) Читаем файл и выводим текст на экран
'''
'''
1: Открытие существующего документа и чтение текста:
'''
read_doc = Document("hello_python.docx")
text_from_doc = ""
for paragraph in read_doc.paragraphs:
    text_from_doc += paragraph.text + "\n"
'''
Здесь открывается существующий документ "hello_python.docx", и текст каждого абзаца добавляется
к переменной text_from_doc.
'''
'''
2: Вывод текста на экран:
'''
print("Текст из файла:")
print(text_from_doc)
'''
Выводит текст из файла на экран.
'''
'''
По порядку: в) Создаем новый документ с абзацем и сохраняем его
'''
'''
1: Создание нового документа и добавление текста:
'''
new_doc = Document()
new_doc.add_paragraph("New paragraph with some text.")
'''
Здесь создается новый объект Document, и в него добавляется абзац с текстом "New paragraph with some text."
'''
'''
2: Сохранение нового документа:
'''
new_doc.save("new_document.docx")
'''
Сохраняет созданный документ в файл с именем "new_document.docx".
'''
'''
3: Вывод уведомления на экран:
'''
print("Новый документ создан и сохранен.")
'''
Выводит сообщение о создании и сохранении нового документа.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
""" ВСЕ СРАЗУ """
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

# Часть а) Создаем Word файл и заполняем его текстом "Hello Python"
doc = Document()
paragraph = doc.add_paragraph("Hello ")
run = paragraph.add_run("Python")
run.bold = True  # Устанавливаем стиль "жирный"
doc.save("hello_python.docx")

# Часть б) Открываем существующий документ и выводим жирный текст
read_doc = Document("hello_python.docx")
bold_text = ""
for paragraph in read_doc.paragraphs:
    for run in paragraph.runs:
        if run.bold:
            bold_text += run.text
print("Жирный текст из файла:")
print(bold_text)

# Часть в) Создаем новый документ с абзацем, изменяем шрифт и размер шрифта
new_doc = Document()
new_paragraph = new_doc.add_paragraph("Новый абзац с измененным шрифтом и размером шрифта.")
new_run = new_paragraph.runs[0]
new_run.font.size = Pt(14)
new_run.font.name = "Arial"  # Устанавливаем шрифт "Arial"
new_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
new_doc.save("new_document_formatted.docx")

print("Новый документ с измененным форматированием создан и сохранен.")
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #



